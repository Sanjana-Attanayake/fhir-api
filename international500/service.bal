// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.

import ballerina/http;
import ballerinax/health.fhir.r5;
import ballerinax/health.fhirr5;
import ballerinax/health.fhir.r5.international500;

# Generic types to wrap all implemented profiles for each resource.
# Add required profile types here.
public type Appointment international500:Appointment;
public type AdministrableProductDefinition international500:AdministrableProductDefinition;
public type Account international500:Account;
public type Invoice international500:Invoice;
public type RequestOrchestration international500:RequestOrchestration|international500:CDSHooksRequestOrchestration;
public type EventDefinition international500:EventDefinition;
public type FormularyItem international500:FormularyItem;
public type MessageDefinition international500:MessageDefinition;
public type Goal international500:Goal;
public type EnrollmentRequest international500:EnrollmentRequest;
public type Endpoint international500:Endpoint;
public type Consent international500:Consent;
public type ArtifactAssessment international500:ArtifactAssessment|international500:EBMRecommendation;
public type Measure international500:ShareableMeasure|international500:PublishableMeasure|international500:Measure;
public type Medication international500:Medication;
public type CapabilityStatement international500:CapabilityStatement;
public type Permission international500:Permission;
public type ResearchSubject international500:ResearchSubject;
public type ActorDefinition international500:ActorDefinition;
public type ConditionDefinition international500:ConditionDefinition;
public type Subscription international500:Subscription;
public type DocumentReference international500:DocumentReference;
public type GraphDefinition international500:GraphDefinition;
public type MetadataResource international500:MetadataResource;
public type Parameters international500:Parameters;
public type CoverageEligibilityResponse international500:CoverageEligibilityResponse;
public type MeasureReport international500:MeasureReport;
public type PractitionerRole international500:PractitionerRole;
public type SubstanceReferenceInformation international500:SubstanceReferenceInformation;
public type DeviceUsage international500:DeviceUsage;
public type RelatedPerson international500:RelatedPerson;
public type PackagedProductDefinition international500:PackagedProductDefinition;
public type ServiceRequest international500:ServiceRequest;
public type SupplyRequest international500:SupplyRequest;
public type Practitioner international500:Practitioner;
public type VerificationResult international500:VerificationResult;
public type NutritionProduct international500:NutritionProduct;
public type SubstanceProtein international500:SubstanceProtein;
public type BodyStructure international500:BodyStructure;
public type Slot international500:Slot;
public type Transport international500:Transport;
public type Contract international500:Contract;
public type Person international500:Person;
public type SubscriptionTopic international500:SubscriptionTopic;
public type RiskAssessment international500:RiskAssessment;
public type PaymentNotice international500:PaymentNotice;
public type Group international500:Group|international500:GroupDefinition|international500:ActualGroup;
public type SubstanceDefinition international500:SubstanceDefinition;
public type Organization international500:Organization;
public type ImplementationGuide international500:ImplementationGuide;
public type CareTeam international500:CareTeam;
public type ImagingStudy international500:ImagingStudy;
public type ClinicalUseDefinition international500:ClinicalUseDefinition;
public type FamilyMemberHistory international500:FamilyMemberHistoryForGeneticsAnalysis|international500:FamilyMemberHistory;
public type ChargeItem international500:ChargeItem;
public type ObservationDefinition international500:ObservationDefinition;
public type Encounter international500:Encounter;
public type Substance international500:Substance;
public type SearchParameter international500:SearchParameter;
public type Communication international500:Communication;
public type ActivityDefinition international500:ShareableActivityDefinition|international500:PublishableActivityDefinition|international500:ActivityDefinition;
public type InsurancePlan international500:InsurancePlan;
public type Linkage international500:Linkage;
public type SubstanceSourceMaterial international500:SubstanceSourceMaterial;
public type ImmunizationEvaluation international500:ImmunizationEvaluation;
public type Ingredient international500:Ingredient;
public type DeviceDispense international500:DeviceDispense;
public type MessageHeader international500:MessageHeader;
public type DeviceRequest international500:DeviceRequest;
public type ImmunizationRecommendation international500:ImmunizationRecommendation;
public type Task international500:Task;
public type ManufacturedItemDefinition international500:ManufacturedItemDefinition;
public type Provenance international500:Provenance|international500:ProvenanceRelevantHistory;
public type Questionnaire international500:Questionnaire;
public type TestPlan international500:TestPlan;
public type BiologicallyDerivedProductDispense international500:BiologicallyDerivedProductDispense;
public type ExplanationOfBenefit international500:ExplanationOfBenefit;
public type Requirements international500:Requirements;
public type ResearchStudy international500:ResearchStudy;
public type DeviceAssociation international500:DeviceAssociation;
public type Specimen international500:Specimen;
public type StructureDefinition international500:StructureDefinition;
public type CarePlan international500:CarePlan;
public type AllergyIntolerance international500:AllergyIntolerance;
public type ChargeItemDefinition international500:ChargeItemDefinition;
public type EpisodeOfCare international500:EpisodeOfCare;
public type Procedure international500:Procedure;
public type List international500:List;
public type ConceptMap international500:ConceptMap|international500:ShareableConceptMap|international500:PublishableConceptMap;
public type OperationDefinition international500:OperationDefinition;
public type ValueSet international500:PublishableValueSet|international500:ComputableValueSet|international500:ExecutableValueSet|international500:ShareableValueSet;
public type Immunization international500:Immunization;
public type MedicationRequest international500:MedicationRequest;
public type BiologicallyDerivedProduct international500:BiologicallyDerivedProduct;
public type Device international500:Device;
public type VisionPrescription international500:VisionPrescription;
public type EncounterHistory international500:EncounterHistory;
public type MolecularSequence international500:MolecularSequence;
public type EvidenceVariable international500:EvidenceVariable;
public type ImagingSelection international500:ImagingSelection;
public type DeviceMetric international500:DeviceMetric;
public type Flag international500:Flag;
public type CodeSystem international500:ShareableCodeSystem|international500:PublishableCodeSystem;
public type SubstanceNucleicAcid international500:SubstanceNucleicAcid;
public type AppointmentResponse international500:AppointmentResponse;
public type StructureMap international500:StructureMap;
public type AdverseEvent international500:AdverseEvent;
public type RegulatedAuthorization international500:RegulatedAuthorization;
public type MedicinalProductDefinition international500:MedicinalProductDefinition;
public type GuidanceResponse international500:CDSHooksGuidanceResponse|international500:GuidanceResponse;
public type Observation international500:Observationbmi|international500:DeviceMetricObservationProfile|international500:Observationresprate|international500:ExampleLipidProfile|international500:Observationbodytemp|international500:Observationheartrate|international500:Observationbodyheight|international500:Observationoxygensat|international500:ExampleLipidProfile|international500:Observationvitalsigns|international500:Observationheadcircum|international500:ExampleLipidProfile|international500:Observationvitalspanel|international500:ExampleLipidProfile|international500:Observationbodyweight|international500:Observationbp|international500:Observation;
public type MedicationAdministration international500:MedicationAdministration;
public type EnrollmentResponse international500:EnrollmentResponse;
public type Library international500:Library|international500:ELMLibrary|international500:ShareableLibrary|international500:ModelInfoLibrary|international500:PublishableLibrary|international500:LogicLibrary|international500:FHIRPathLibrary|international500:CQLLibrary|international500:ModuleDefinitionLibrary;
public type Binary international500:Binary;
public type MedicationStatement international500:MedicationStatement;
public type CommunicationRequest international500:CommunicationRequest;
public type TestScript international500:TestScript|international500:ShareableTestScript;
public type GenomicStudy international500:GenomicStudy;
public type InventoryItem international500:InventoryItem;
public type SubstancePolymer international500:SubstancePolymer;
public type Basic international500:Basic;
public type TestReport international500:TestReport;
public type ClaimResponse international500:ClaimResponse;
public type MedicationDispense international500:MedicationDispense;
public type OrganizationAffiliation international500:OrganizationAffiliation;
public type DiagnosticReport international500:ExampleLipidProfile|international500:DiagnosticReport;
public type HealthcareService international500:HealthcareService;
public type InventoryReport international500:InventoryReport;
public type EvidenceReport international500:EvidenceReport;
public type NutritionOrder international500:NutritionOrder;
public type TerminologyCapabilities international500:TerminologyCapabilities;
public type Evidence international500:Evidence;
public type AuditEvent international500:AuditEvent;
public type Citation international500:Citation;
public type PaymentReconciliation international500:PaymentReconciliation;
public type SpecimenDefinition international500:SpecimenDefinition;
public type Condition international500:Condition;
public type Composition international500:DocumentSectionLibrary|international500:DocumentStructure|international500:ClinicalDocument|international500:Composition|international500:ProfileForCatalog;
public type DetectedIssue international500:DetectedIssue;
public type Bundle international500:DocumentBundle|international500:HistoryBundle|international500:SearchSetBundle|international500:BatchResponseBundle|international500:SubscriptionNotificationBundle|international500:BatchBundle|international500:TransactionResponseBundle|international500:TransactionBundle;
public type CompartmentDefinition international500:CompartmentDefinition;
public type MedicationKnowledge international500:MedicationKnowledge;
public type Patient international500:Patient;
public type Coverage international500:Coverage;
public type QuestionnaireResponse international500:QuestionnaireResponse;
public type CoverageEligibilityRequest international500:CoverageEligibilityRequest;
public type NamingSystem international500:NamingSystem|international500:ShareableNamingSystem|international500:PublishableNamingSystem;
public type SubscriptionStatus international500:SubscriptionStatus;
public type ExampleScenario international500:ExampleScenario;
public type SupplyDelivery international500:SupplyDelivery;
public type Schedule international500:Schedule;
public type DeviceDefinition international500:DeviceDefinition;
public type ClinicalImpression international500:ClinicalImpression;
public type PlanDefinition international500:CDSHooksServicePlanDefinition|international500:ComputablePlanDefinition|international500:ShareablePlanDefinition|international500:PublishablePlanDefinition|international500:PlanDefinition;
public type NutritionIntake international500:NutritionIntake;
public type CanonicalResource international500:CanonicalResource;
public type Claim international500:Claim;
public type Location international500:Location;

# initialize source system endpoints here


// // # Appointment API                                                                                                          #
// 
service /fhir/r5/Appointment on new fhirr5:Listener(config = appointmentApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Appointment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Appointment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Appointment appointment) returns Appointment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Appointment appointment) returns Appointment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Appointment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # AdministrableProductDefinition API                                                                                                          #
// 
service /fhir/r5/AdministrableProductDefinition on new fhirr5:Listener(config = administrableproductdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns AdministrableProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns AdministrableProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, AdministrableProductDefinition administrableproductdefinition) returns AdministrableProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, AdministrableProductDefinition administrableproductdefinition) returns AdministrableProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns AdministrableProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Account API                                                                                                          #
// 
service /fhir/r5/Account on new fhirr5:Listener(config = accountApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Account|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Account|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Account account) returns Account|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Account account) returns Account|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Account|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Invoice API                                                                                                          #
// 
service /fhir/r5/Invoice on new fhirr5:Listener(config = invoiceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Invoice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Invoice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Invoice invoice) returns Invoice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Invoice invoice) returns Invoice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Invoice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # RequestOrchestration API                                                                                                          #
// 
service /fhir/r5/RequestOrchestration on new fhirr5:Listener(config = requestorchestrationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns RequestOrchestration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns RequestOrchestration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, RequestOrchestration requestorchestration) returns RequestOrchestration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, RequestOrchestration requestorchestration) returns RequestOrchestration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns RequestOrchestration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # EventDefinition API                                                                                                          #
// 
service /fhir/r5/EventDefinition on new fhirr5:Listener(config = eventdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns EventDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns EventDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, EventDefinition eventdefinition) returns EventDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, EventDefinition eventdefinition) returns EventDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns EventDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # FormularyItem API                                                                                                          #
// 
service /fhir/r5/FormularyItem on new fhirr5:Listener(config = formularyitemApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns FormularyItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns FormularyItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, FormularyItem formularyitem) returns FormularyItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, FormularyItem formularyitem) returns FormularyItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns FormularyItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MessageDefinition API                                                                                                          #
// 
service /fhir/r5/MessageDefinition on new fhirr5:Listener(config = messagedefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MessageDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MessageDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MessageDefinition messagedefinition) returns MessageDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MessageDefinition messagedefinition) returns MessageDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MessageDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Goal API                                                                                                          #
// 
service /fhir/r5/Goal on new fhirr5:Listener(config = goalApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Goal|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Goal|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Goal goal) returns Goal|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Goal goal) returns Goal|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Goal|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # EnrollmentRequest API                                                                                                          #
// 
service /fhir/r5/EnrollmentRequest on new fhirr5:Listener(config = enrollmentrequestApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns EnrollmentRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns EnrollmentRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, EnrollmentRequest enrollmentrequest) returns EnrollmentRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, EnrollmentRequest enrollmentrequest) returns EnrollmentRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns EnrollmentRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Endpoint API                                                                                                          #
// 
service /fhir/r5/Endpoint on new fhirr5:Listener(config = endpointApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Endpoint|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Endpoint|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Endpoint endpoint) returns Endpoint|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Endpoint endpoint) returns Endpoint|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Endpoint|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Consent API                                                                                                          #
// 
service /fhir/r5/Consent on new fhirr5:Listener(config = consentApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Consent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Consent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Consent consent) returns Consent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Consent consent) returns Consent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Consent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ArtifactAssessment API                                                                                                          #
// 
service /fhir/r5/ArtifactAssessment on new fhirr5:Listener(config = artifactassessmentApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ArtifactAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ArtifactAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ArtifactAssessment artifactassessment) returns ArtifactAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ArtifactAssessment artifactassessment) returns ArtifactAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ArtifactAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Measure API                                                                                                          #
// 
service /fhir/r5/Measure on new fhirr5:Listener(config = measureApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Measure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Measure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Measure measure) returns Measure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Measure measure) returns Measure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Measure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Medication API                                                                                                          #
// 
service /fhir/r5/Medication on new fhirr5:Listener(config = medicationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Medication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Medication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Medication medication) returns Medication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Medication medication) returns Medication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Medication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # CapabilityStatement API                                                                                                          #
// 
service /fhir/r5/CapabilityStatement on new fhirr5:Listener(config = capabilitystatementApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns CapabilityStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns CapabilityStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, CapabilityStatement capabilitystatement) returns CapabilityStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, CapabilityStatement capabilitystatement) returns CapabilityStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns CapabilityStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Permission API                                                                                                          #
// 
service /fhir/r5/Permission on new fhirr5:Listener(config = permissionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Permission|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Permission|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Permission permission) returns Permission|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Permission permission) returns Permission|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Permission|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ResearchSubject API                                                                                                          #
// 
service /fhir/r5/ResearchSubject on new fhirr5:Listener(config = researchsubjectApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ResearchSubject|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ResearchSubject|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ResearchSubject researchsubject) returns ResearchSubject|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ResearchSubject researchsubject) returns ResearchSubject|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ResearchSubject|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ActorDefinition API                                                                                                          #
// 
service /fhir/r5/ActorDefinition on new fhirr5:Listener(config = actordefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ActorDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ActorDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ActorDefinition actordefinition) returns ActorDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ActorDefinition actordefinition) returns ActorDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ActorDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ConditionDefinition API                                                                                                          #
// 
service /fhir/r5/ConditionDefinition on new fhirr5:Listener(config = conditiondefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ConditionDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ConditionDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ConditionDefinition conditiondefinition) returns ConditionDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ConditionDefinition conditiondefinition) returns ConditionDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ConditionDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Subscription API                                                                                                          #
// 
service /fhir/r5/Subscription on new fhirr5:Listener(config = subscriptionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Subscription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Subscription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Subscription subscription) returns Subscription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Subscription subscription) returns Subscription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Subscription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # DocumentReference API                                                                                                          #
// 
service /fhir/r5/DocumentReference on new fhirr5:Listener(config = documentreferenceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns DocumentReference|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns DocumentReference|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, DocumentReference documentreference) returns DocumentReference|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, DocumentReference documentreference) returns DocumentReference|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns DocumentReference|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # GraphDefinition API                                                                                                          #
// 
service /fhir/r5/GraphDefinition on new fhirr5:Listener(config = graphdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns GraphDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns GraphDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, GraphDefinition graphdefinition) returns GraphDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, GraphDefinition graphdefinition) returns GraphDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns GraphDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MetadataResource API                                                                                                          #
// 
service /fhir/r5/MetadataResource on new fhirr5:Listener(config = metadataresourceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MetadataResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MetadataResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MetadataResource metadataresource) returns MetadataResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MetadataResource metadataresource) returns MetadataResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MetadataResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Parameters API                                                                                                          #
// 
service /fhir/r5/Parameters on new fhirr5:Listener(config = parametersApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Parameters|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Parameters|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Parameters parameters) returns Parameters|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Parameters parameters) returns Parameters|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Parameters|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # CoverageEligibilityResponse API                                                                                                          #
// 
service /fhir/r5/CoverageEligibilityResponse on new fhirr5:Listener(config = coverageeligibilityresponseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns CoverageEligibilityResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns CoverageEligibilityResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, CoverageEligibilityResponse coverageeligibilityresponse) returns CoverageEligibilityResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, CoverageEligibilityResponse coverageeligibilityresponse) returns CoverageEligibilityResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns CoverageEligibilityResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MeasureReport API                                                                                                          #
// 
service /fhir/r5/MeasureReport on new fhirr5:Listener(config = measurereportApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MeasureReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MeasureReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MeasureReport measurereport) returns MeasureReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MeasureReport measurereport) returns MeasureReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MeasureReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # PractitionerRole API                                                                                                          #
// 
service /fhir/r5/PractitionerRole on new fhirr5:Listener(config = practitionerroleApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns PractitionerRole|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns PractitionerRole|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, PractitionerRole practitionerrole) returns PractitionerRole|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, PractitionerRole practitionerrole) returns PractitionerRole|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns PractitionerRole|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SubstanceReferenceInformation API                                                                                                          #
// 
service /fhir/r5/SubstanceReferenceInformation on new fhirr5:Listener(config = substancereferenceinformationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SubstanceReferenceInformation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SubstanceReferenceInformation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SubstanceReferenceInformation substancereferenceinformation) returns SubstanceReferenceInformation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SubstanceReferenceInformation substancereferenceinformation) returns SubstanceReferenceInformation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SubstanceReferenceInformation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # DeviceUsage API                                                                                                          #
// 
service /fhir/r5/DeviceUsage on new fhirr5:Listener(config = deviceusageApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns DeviceUsage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns DeviceUsage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, DeviceUsage deviceusage) returns DeviceUsage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, DeviceUsage deviceusage) returns DeviceUsage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns DeviceUsage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # RelatedPerson API                                                                                                          #
// 
service /fhir/r5/RelatedPerson on new fhirr5:Listener(config = relatedpersonApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns RelatedPerson|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns RelatedPerson|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, RelatedPerson relatedperson) returns RelatedPerson|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, RelatedPerson relatedperson) returns RelatedPerson|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns RelatedPerson|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # PackagedProductDefinition API                                                                                                          #
// 
service /fhir/r5/PackagedProductDefinition on new fhirr5:Listener(config = packagedproductdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns PackagedProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns PackagedProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, PackagedProductDefinition packagedproductdefinition) returns PackagedProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, PackagedProductDefinition packagedproductdefinition) returns PackagedProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns PackagedProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ServiceRequest API                                                                                                          #
// 
service /fhir/r5/ServiceRequest on new fhirr5:Listener(config = servicerequestApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ServiceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ServiceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ServiceRequest servicerequest) returns ServiceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ServiceRequest servicerequest) returns ServiceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ServiceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SupplyRequest API                                                                                                          #
// 
service /fhir/r5/SupplyRequest on new fhirr5:Listener(config = supplyrequestApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SupplyRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SupplyRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SupplyRequest supplyrequest) returns SupplyRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SupplyRequest supplyrequest) returns SupplyRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SupplyRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Practitioner API                                                                                                          #
// 
service /fhir/r5/Practitioner on new fhirr5:Listener(config = practitionerApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Practitioner|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Practitioner|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Practitioner practitioner) returns Practitioner|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Practitioner practitioner) returns Practitioner|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Practitioner|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # VerificationResult API                                                                                                          #
// 
service /fhir/r5/VerificationResult on new fhirr5:Listener(config = verificationresultApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns VerificationResult|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns VerificationResult|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, VerificationResult verificationresult) returns VerificationResult|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, VerificationResult verificationresult) returns VerificationResult|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns VerificationResult|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # NutritionProduct API                                                                                                          #
// 
service /fhir/r5/NutritionProduct on new fhirr5:Listener(config = nutritionproductApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns NutritionProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns NutritionProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, NutritionProduct nutritionproduct) returns NutritionProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, NutritionProduct nutritionproduct) returns NutritionProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns NutritionProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SubstanceProtein API                                                                                                          #
// 
service /fhir/r5/SubstanceProtein on new fhirr5:Listener(config = substanceproteinApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SubstanceProtein|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SubstanceProtein|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SubstanceProtein substanceprotein) returns SubstanceProtein|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SubstanceProtein substanceprotein) returns SubstanceProtein|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SubstanceProtein|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # BodyStructure API                                                                                                          #
// 
service /fhir/r5/BodyStructure on new fhirr5:Listener(config = bodystructureApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns BodyStructure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns BodyStructure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, BodyStructure bodystructure) returns BodyStructure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, BodyStructure bodystructure) returns BodyStructure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns BodyStructure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Slot API                                                                                                          #
// 
service /fhir/r5/Slot on new fhirr5:Listener(config = slotApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Slot|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Slot|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Slot slot) returns Slot|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Slot slot) returns Slot|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Slot|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Transport API                                                                                                          #
// 
service /fhir/r5/Transport on new fhirr5:Listener(config = transportApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Transport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Transport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Transport transport) returns Transport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Transport transport) returns Transport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Transport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Contract API                                                                                                          #
// 
service /fhir/r5/Contract on new fhirr5:Listener(config = contractApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Contract|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Contract|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Contract contract) returns Contract|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Contract contract) returns Contract|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Contract|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Person API                                                                                                          #
// 
service /fhir/r5/Person on new fhirr5:Listener(config = personApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Person|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Person|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Person person) returns Person|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Person person) returns Person|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Person|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SubscriptionTopic API                                                                                                          #
// 
service /fhir/r5/SubscriptionTopic on new fhirr5:Listener(config = subscriptiontopicApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SubscriptionTopic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SubscriptionTopic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SubscriptionTopic subscriptiontopic) returns SubscriptionTopic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SubscriptionTopic subscriptiontopic) returns SubscriptionTopic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SubscriptionTopic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # RiskAssessment API                                                                                                          #
// 
service /fhir/r5/RiskAssessment on new fhirr5:Listener(config = riskassessmentApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns RiskAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns RiskAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, RiskAssessment riskassessment) returns RiskAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, RiskAssessment riskassessment) returns RiskAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns RiskAssessment|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # PaymentNotice API                                                                                                          #
// 
service /fhir/r5/PaymentNotice on new fhirr5:Listener(config = paymentnoticeApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns PaymentNotice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns PaymentNotice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, PaymentNotice paymentnotice) returns PaymentNotice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, PaymentNotice paymentnotice) returns PaymentNotice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns PaymentNotice|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Group API                                                                                                          #
// 
service /fhir/r5/Group on new fhirr5:Listener(config = groupApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Group|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Group|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Group group) returns Group|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Group group) returns Group|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Group|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SubstanceDefinition API                                                                                                          #
// 
service /fhir/r5/SubstanceDefinition on new fhirr5:Listener(config = substancedefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SubstanceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SubstanceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SubstanceDefinition substancedefinition) returns SubstanceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SubstanceDefinition substancedefinition) returns SubstanceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SubstanceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Organization API                                                                                                          #
// 
service /fhir/r5/Organization on new fhirr5:Listener(config = organizationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Organization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Organization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Organization organization) returns Organization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Organization organization) returns Organization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Organization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ImplementationGuide API                                                                                                          #
// 
service /fhir/r5/ImplementationGuide on new fhirr5:Listener(config = implementationguideApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ImplementationGuide|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ImplementationGuide|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ImplementationGuide implementationguide) returns ImplementationGuide|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ImplementationGuide implementationguide) returns ImplementationGuide|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ImplementationGuide|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # CareTeam API                                                                                                          #
// 
service /fhir/r5/CareTeam on new fhirr5:Listener(config = careteamApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns CareTeam|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns CareTeam|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, CareTeam careteam) returns CareTeam|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, CareTeam careteam) returns CareTeam|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns CareTeam|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ImagingStudy API                                                                                                          #
// 
service /fhir/r5/ImagingStudy on new fhirr5:Listener(config = imagingstudyApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ImagingStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ImagingStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ImagingStudy imagingstudy) returns ImagingStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ImagingStudy imagingstudy) returns ImagingStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ImagingStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ClinicalUseDefinition API                                                                                                          #
// 
service /fhir/r5/ClinicalUseDefinition on new fhirr5:Listener(config = clinicalusedefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ClinicalUseDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ClinicalUseDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ClinicalUseDefinition clinicalusedefinition) returns ClinicalUseDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ClinicalUseDefinition clinicalusedefinition) returns ClinicalUseDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ClinicalUseDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # FamilyMemberHistory API                                                                                                          #
// 
service /fhir/r5/FamilyMemberHistory on new fhirr5:Listener(config = familymemberhistoryApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns FamilyMemberHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns FamilyMemberHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, FamilyMemberHistory familymemberhistory) returns FamilyMemberHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, FamilyMemberHistory familymemberhistory) returns FamilyMemberHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns FamilyMemberHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ChargeItem API                                                                                                          #
// 
service /fhir/r5/ChargeItem on new fhirr5:Listener(config = chargeitemApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ChargeItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ChargeItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ChargeItem chargeitem) returns ChargeItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ChargeItem chargeitem) returns ChargeItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ChargeItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ObservationDefinition API                                                                                                          #
// 
service /fhir/r5/ObservationDefinition on new fhirr5:Listener(config = observationdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ObservationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ObservationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ObservationDefinition observationdefinition) returns ObservationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ObservationDefinition observationdefinition) returns ObservationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ObservationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Encounter API                                                                                                          #
// 
service /fhir/r5/Encounter on new fhirr5:Listener(config = encounterApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Encounter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Encounter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Encounter encounter) returns Encounter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Encounter encounter) returns Encounter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Encounter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Substance API                                                                                                          #
// 
service /fhir/r5/Substance on new fhirr5:Listener(config = substanceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Substance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Substance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Substance substance) returns Substance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Substance substance) returns Substance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Substance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SearchParameter API                                                                                                          #
// 
service /fhir/r5/SearchParameter on new fhirr5:Listener(config = searchparameterApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SearchParameter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SearchParameter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SearchParameter searchparameter) returns SearchParameter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SearchParameter searchparameter) returns SearchParameter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SearchParameter|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Communication API                                                                                                          #
// 
service /fhir/r5/Communication on new fhirr5:Listener(config = communicationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Communication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Communication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Communication communication) returns Communication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Communication communication) returns Communication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Communication|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ActivityDefinition API                                                                                                          #
// 
service /fhir/r5/ActivityDefinition on new fhirr5:Listener(config = activitydefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ActivityDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ActivityDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ActivityDefinition activitydefinition) returns ActivityDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ActivityDefinition activitydefinition) returns ActivityDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ActivityDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # InsurancePlan API                                                                                                          #
// 
service /fhir/r5/InsurancePlan on new fhirr5:Listener(config = insuranceplanApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns InsurancePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns InsurancePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, InsurancePlan insuranceplan) returns InsurancePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, InsurancePlan insuranceplan) returns InsurancePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns InsurancePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Linkage API                                                                                                          #
// 
service /fhir/r5/Linkage on new fhirr5:Listener(config = linkageApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Linkage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Linkage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Linkage linkage) returns Linkage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Linkage linkage) returns Linkage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Linkage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SubstanceSourceMaterial API                                                                                                          #
// 
service /fhir/r5/SubstanceSourceMaterial on new fhirr5:Listener(config = substancesourcematerialApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SubstanceSourceMaterial|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SubstanceSourceMaterial|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SubstanceSourceMaterial substancesourcematerial) returns SubstanceSourceMaterial|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SubstanceSourceMaterial substancesourcematerial) returns SubstanceSourceMaterial|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SubstanceSourceMaterial|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ImmunizationEvaluation API                                                                                                          #
// 
service /fhir/r5/ImmunizationEvaluation on new fhirr5:Listener(config = immunizationevaluationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ImmunizationEvaluation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ImmunizationEvaluation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ImmunizationEvaluation immunizationevaluation) returns ImmunizationEvaluation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ImmunizationEvaluation immunizationevaluation) returns ImmunizationEvaluation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ImmunizationEvaluation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Ingredient API                                                                                                          #
// 
service /fhir/r5/Ingredient on new fhirr5:Listener(config = ingredientApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Ingredient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Ingredient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Ingredient ingredient) returns Ingredient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Ingredient ingredient) returns Ingredient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Ingredient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # DeviceDispense API                                                                                                          #
// 
service /fhir/r5/DeviceDispense on new fhirr5:Listener(config = devicedispenseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns DeviceDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns DeviceDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, DeviceDispense devicedispense) returns DeviceDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, DeviceDispense devicedispense) returns DeviceDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns DeviceDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MessageHeader API                                                                                                          #
// 
service /fhir/r5/MessageHeader on new fhirr5:Listener(config = messageheaderApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MessageHeader|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MessageHeader|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MessageHeader messageheader) returns MessageHeader|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MessageHeader messageheader) returns MessageHeader|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MessageHeader|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # DeviceRequest API                                                                                                          #
// 
service /fhir/r5/DeviceRequest on new fhirr5:Listener(config = devicerequestApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns DeviceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns DeviceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, DeviceRequest devicerequest) returns DeviceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, DeviceRequest devicerequest) returns DeviceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns DeviceRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ImmunizationRecommendation API                                                                                                          #
// 
service /fhir/r5/ImmunizationRecommendation on new fhirr5:Listener(config = immunizationrecommendationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ImmunizationRecommendation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ImmunizationRecommendation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ImmunizationRecommendation immunizationrecommendation) returns ImmunizationRecommendation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ImmunizationRecommendation immunizationrecommendation) returns ImmunizationRecommendation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ImmunizationRecommendation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Task API                                                                                                          #
// 
service /fhir/r5/Task on new fhirr5:Listener(config = taskApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Task|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Task|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Task task) returns Task|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Task task) returns Task|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Task|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ManufacturedItemDefinition API                                                                                                          #
// 
service /fhir/r5/ManufacturedItemDefinition on new fhirr5:Listener(config = manufactureditemdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ManufacturedItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ManufacturedItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ManufacturedItemDefinition manufactureditemdefinition) returns ManufacturedItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ManufacturedItemDefinition manufactureditemdefinition) returns ManufacturedItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ManufacturedItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Provenance API                                                                                                          #
// 
service /fhir/r5/Provenance on new fhirr5:Listener(config = provenanceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Provenance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Provenance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Provenance provenance) returns Provenance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Provenance provenance) returns Provenance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Provenance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Questionnaire API                                                                                                          #
// 
service /fhir/r5/Questionnaire on new fhirr5:Listener(config = questionnaireApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Questionnaire|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Questionnaire|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Questionnaire questionnaire) returns Questionnaire|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Questionnaire questionnaire) returns Questionnaire|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Questionnaire|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # TestPlan API                                                                                                          #
// 
service /fhir/r5/TestPlan on new fhirr5:Listener(config = testplanApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns TestPlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns TestPlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, TestPlan testplan) returns TestPlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, TestPlan testplan) returns TestPlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns TestPlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # BiologicallyDerivedProductDispense API                                                                                                          #
// 
service /fhir/r5/BiologicallyDerivedProductDispense on new fhirr5:Listener(config = biologicallyderivedproductdispenseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns BiologicallyDerivedProductDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns BiologicallyDerivedProductDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, BiologicallyDerivedProductDispense biologicallyderivedproductdispense) returns BiologicallyDerivedProductDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, BiologicallyDerivedProductDispense biologicallyderivedproductdispense) returns BiologicallyDerivedProductDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns BiologicallyDerivedProductDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ExplanationOfBenefit API                                                                                                          #
// 
service /fhir/r5/ExplanationOfBenefit on new fhirr5:Listener(config = explanationofbenefitApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ExplanationOfBenefit|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ExplanationOfBenefit|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ExplanationOfBenefit explanationofbenefit) returns ExplanationOfBenefit|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ExplanationOfBenefit explanationofbenefit) returns ExplanationOfBenefit|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ExplanationOfBenefit|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Requirements API                                                                                                          #
// 
service /fhir/r5/Requirements on new fhirr5:Listener(config = requirementsApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Requirements|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Requirements|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Requirements requirements) returns Requirements|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Requirements requirements) returns Requirements|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Requirements|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ResearchStudy API                                                                                                          #
// 
service /fhir/r5/ResearchStudy on new fhirr5:Listener(config = researchstudyApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ResearchStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ResearchStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ResearchStudy researchstudy) returns ResearchStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ResearchStudy researchstudy) returns ResearchStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ResearchStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # DeviceAssociation API                                                                                                          #
// 
service /fhir/r5/DeviceAssociation on new fhirr5:Listener(config = deviceassociationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns DeviceAssociation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns DeviceAssociation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, DeviceAssociation deviceassociation) returns DeviceAssociation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, DeviceAssociation deviceassociation) returns DeviceAssociation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns DeviceAssociation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Specimen API                                                                                                          #
// 
service /fhir/r5/Specimen on new fhirr5:Listener(config = specimenApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Specimen|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Specimen|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Specimen specimen) returns Specimen|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Specimen specimen) returns Specimen|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Specimen|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # StructureDefinition API                                                                                                          #
// 
service /fhir/r5/StructureDefinition on new fhirr5:Listener(config = structuredefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns StructureDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns StructureDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, StructureDefinition structuredefinition) returns StructureDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, StructureDefinition structuredefinition) returns StructureDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns StructureDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # CarePlan API                                                                                                          #
// 
service /fhir/r5/CarePlan on new fhirr5:Listener(config = careplanApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns CarePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns CarePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, CarePlan careplan) returns CarePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, CarePlan careplan) returns CarePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns CarePlan|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # AllergyIntolerance API                                                                                                          #
// 
service /fhir/r5/AllergyIntolerance on new fhirr5:Listener(config = allergyintoleranceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns AllergyIntolerance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns AllergyIntolerance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, AllergyIntolerance allergyintolerance) returns AllergyIntolerance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, AllergyIntolerance allergyintolerance) returns AllergyIntolerance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns AllergyIntolerance|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ChargeItemDefinition API                                                                                                          #
// 
service /fhir/r5/ChargeItemDefinition on new fhirr5:Listener(config = chargeitemdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ChargeItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ChargeItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ChargeItemDefinition chargeitemdefinition) returns ChargeItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ChargeItemDefinition chargeitemdefinition) returns ChargeItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ChargeItemDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # EpisodeOfCare API                                                                                                          #
// 
service /fhir/r5/EpisodeOfCare on new fhirr5:Listener(config = episodeofcareApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns EpisodeOfCare|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns EpisodeOfCare|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, EpisodeOfCare episodeofcare) returns EpisodeOfCare|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, EpisodeOfCare episodeofcare) returns EpisodeOfCare|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns EpisodeOfCare|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Procedure API                                                                                                          #
// 
service /fhir/r5/Procedure on new fhirr5:Listener(config = procedureApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Procedure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Procedure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Procedure procedure) returns Procedure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Procedure procedure) returns Procedure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Procedure|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # List API                                                                                                          #
// 
service /fhir/r5/List on new fhirr5:Listener(config = listApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns List|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns List|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, List list) returns List|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, List list) returns List|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns List|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ConceptMap API                                                                                                          #
// 
service /fhir/r5/ConceptMap on new fhirr5:Listener(config = conceptmapApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ConceptMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ConceptMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ConceptMap conceptmap) returns ConceptMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ConceptMap conceptmap) returns ConceptMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ConceptMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # OperationDefinition API                                                                                                          #
// 
service /fhir/r5/OperationDefinition on new fhirr5:Listener(config = operationdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns OperationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns OperationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, OperationDefinition operationdefinition) returns OperationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, OperationDefinition operationdefinition) returns OperationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns OperationDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ValueSet API                                                                                                          #
// 
service /fhir/r5/ValueSet on new fhirr5:Listener(config = valuesetApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ValueSet|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ValueSet|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ValueSet valueset) returns ValueSet|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ValueSet valueset) returns ValueSet|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ValueSet|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Immunization API                                                                                                          #
// 
service /fhir/r5/Immunization on new fhirr5:Listener(config = immunizationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Immunization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Immunization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Immunization immunization) returns Immunization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Immunization immunization) returns Immunization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Immunization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MedicationRequest API                                                                                                          #
// 
service /fhir/r5/MedicationRequest on new fhirr5:Listener(config = medicationrequestApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MedicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MedicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MedicationRequest medicationrequest) returns MedicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MedicationRequest medicationrequest) returns MedicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MedicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # BiologicallyDerivedProduct API                                                                                                          #
// 
service /fhir/r5/BiologicallyDerivedProduct on new fhirr5:Listener(config = biologicallyderivedproductApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns BiologicallyDerivedProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns BiologicallyDerivedProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, BiologicallyDerivedProduct biologicallyderivedproduct) returns BiologicallyDerivedProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, BiologicallyDerivedProduct biologicallyderivedproduct) returns BiologicallyDerivedProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns BiologicallyDerivedProduct|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Device API                                                                                                          #
// 
service /fhir/r5/Device on new fhirr5:Listener(config = deviceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Device|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Device|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Device device) returns Device|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Device device) returns Device|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Device|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # VisionPrescription API                                                                                                          #
// 
service /fhir/r5/VisionPrescription on new fhirr5:Listener(config = visionprescriptionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns VisionPrescription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns VisionPrescription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, VisionPrescription visionprescription) returns VisionPrescription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, VisionPrescription visionprescription) returns VisionPrescription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns VisionPrescription|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # EncounterHistory API                                                                                                          #
// 
service /fhir/r5/EncounterHistory on new fhirr5:Listener(config = encounterhistoryApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns EncounterHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns EncounterHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, EncounterHistory encounterhistory) returns EncounterHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, EncounterHistory encounterhistory) returns EncounterHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns EncounterHistory|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MolecularSequence API                                                                                                          #
// 
service /fhir/r5/MolecularSequence on new fhirr5:Listener(config = molecularsequenceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MolecularSequence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MolecularSequence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MolecularSequence molecularsequence) returns MolecularSequence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MolecularSequence molecularsequence) returns MolecularSequence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MolecularSequence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # EvidenceVariable API                                                                                                          #
// 
service /fhir/r5/EvidenceVariable on new fhirr5:Listener(config = evidencevariableApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns EvidenceVariable|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns EvidenceVariable|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, EvidenceVariable evidencevariable) returns EvidenceVariable|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, EvidenceVariable evidencevariable) returns EvidenceVariable|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns EvidenceVariable|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ImagingSelection API                                                                                                          #
// 
service /fhir/r5/ImagingSelection on new fhirr5:Listener(config = imagingselectionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ImagingSelection|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ImagingSelection|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ImagingSelection imagingselection) returns ImagingSelection|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ImagingSelection imagingselection) returns ImagingSelection|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ImagingSelection|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # DeviceMetric API                                                                                                          #
// 
service /fhir/r5/DeviceMetric on new fhirr5:Listener(config = devicemetricApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns DeviceMetric|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns DeviceMetric|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, DeviceMetric devicemetric) returns DeviceMetric|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, DeviceMetric devicemetric) returns DeviceMetric|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns DeviceMetric|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Flag API                                                                                                          #
// 
service /fhir/r5/Flag on new fhirr5:Listener(config = flagApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Flag|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Flag|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Flag flag) returns Flag|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Flag flag) returns Flag|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Flag|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # CodeSystem API                                                                                                          #
// 
service /fhir/r5/CodeSystem on new fhirr5:Listener(config = codesystemApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns CodeSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns CodeSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, CodeSystem codesystem) returns CodeSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, CodeSystem codesystem) returns CodeSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns CodeSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SubstanceNucleicAcid API                                                                                                          #
// 
service /fhir/r5/SubstanceNucleicAcid on new fhirr5:Listener(config = substancenucleicacidApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SubstanceNucleicAcid|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SubstanceNucleicAcid|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SubstanceNucleicAcid substancenucleicacid) returns SubstanceNucleicAcid|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SubstanceNucleicAcid substancenucleicacid) returns SubstanceNucleicAcid|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SubstanceNucleicAcid|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # AppointmentResponse API                                                                                                          #
// 
service /fhir/r5/AppointmentResponse on new fhirr5:Listener(config = appointmentresponseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns AppointmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns AppointmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, AppointmentResponse appointmentresponse) returns AppointmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, AppointmentResponse appointmentresponse) returns AppointmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns AppointmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # StructureMap API                                                                                                          #
// 
service /fhir/r5/StructureMap on new fhirr5:Listener(config = structuremapApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns StructureMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns StructureMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, StructureMap structuremap) returns StructureMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, StructureMap structuremap) returns StructureMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns StructureMap|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # AdverseEvent API                                                                                                          #
// 
service /fhir/r5/AdverseEvent on new fhirr5:Listener(config = adverseeventApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns AdverseEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns AdverseEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, AdverseEvent adverseevent) returns AdverseEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, AdverseEvent adverseevent) returns AdverseEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns AdverseEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # RegulatedAuthorization API                                                                                                          #
// 
service /fhir/r5/RegulatedAuthorization on new fhirr5:Listener(config = regulatedauthorizationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns RegulatedAuthorization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns RegulatedAuthorization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, RegulatedAuthorization regulatedauthorization) returns RegulatedAuthorization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, RegulatedAuthorization regulatedauthorization) returns RegulatedAuthorization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns RegulatedAuthorization|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MedicinalProductDefinition API                                                                                                          #
// 
service /fhir/r5/MedicinalProductDefinition on new fhirr5:Listener(config = medicinalproductdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MedicinalProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MedicinalProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MedicinalProductDefinition medicinalproductdefinition) returns MedicinalProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MedicinalProductDefinition medicinalproductdefinition) returns MedicinalProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MedicinalProductDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # GuidanceResponse API                                                                                                          #
// 
service /fhir/r5/GuidanceResponse on new fhirr5:Listener(config = guidanceresponseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns GuidanceResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns GuidanceResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, GuidanceResponse guidanceresponse) returns GuidanceResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, GuidanceResponse guidanceresponse) returns GuidanceResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns GuidanceResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Observation API                                                                                                          #
// 
service /fhir/r5/Observation on new fhirr5:Listener(config = observationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Observation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Observation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Observation observation) returns Observation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Observation observation) returns Observation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Observation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MedicationAdministration API                                                                                                          #
// 
service /fhir/r5/MedicationAdministration on new fhirr5:Listener(config = medicationadministrationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MedicationAdministration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MedicationAdministration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MedicationAdministration medicationadministration) returns MedicationAdministration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MedicationAdministration medicationadministration) returns MedicationAdministration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MedicationAdministration|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # EnrollmentResponse API                                                                                                          #
// 
service /fhir/r5/EnrollmentResponse on new fhirr5:Listener(config = enrollmentresponseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns EnrollmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns EnrollmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, EnrollmentResponse enrollmentresponse) returns EnrollmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, EnrollmentResponse enrollmentresponse) returns EnrollmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns EnrollmentResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Library API                                                                                                          #
// 
service /fhir/r5/Library on new fhirr5:Listener(config = libraryApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Library|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Library|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Library library) returns Library|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Library library) returns Library|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Library|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Binary API                                                                                                          #
// 
service /fhir/r5/Binary on new fhirr5:Listener(config = binaryApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Binary|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Binary|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Binary binary) returns Binary|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Binary binary) returns Binary|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Binary|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MedicationStatement API                                                                                                          #
// 
service /fhir/r5/MedicationStatement on new fhirr5:Listener(config = medicationstatementApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MedicationStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MedicationStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MedicationStatement medicationstatement) returns MedicationStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MedicationStatement medicationstatement) returns MedicationStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MedicationStatement|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # CommunicationRequest API                                                                                                          #
// 
service /fhir/r5/CommunicationRequest on new fhirr5:Listener(config = communicationrequestApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns CommunicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns CommunicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, CommunicationRequest communicationrequest) returns CommunicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, CommunicationRequest communicationrequest) returns CommunicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns CommunicationRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # TestScript API                                                                                                          #
// 
service /fhir/r5/TestScript on new fhirr5:Listener(config = testscriptApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns TestScript|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns TestScript|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, TestScript testscript) returns TestScript|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, TestScript testscript) returns TestScript|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns TestScript|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # GenomicStudy API                                                                                                          #
// 
service /fhir/r5/GenomicStudy on new fhirr5:Listener(config = genomicstudyApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns GenomicStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns GenomicStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, GenomicStudy genomicstudy) returns GenomicStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, GenomicStudy genomicstudy) returns GenomicStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns GenomicStudy|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # InventoryItem API                                                                                                          #
// 
service /fhir/r5/InventoryItem on new fhirr5:Listener(config = inventoryitemApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns InventoryItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns InventoryItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, InventoryItem inventoryitem) returns InventoryItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, InventoryItem inventoryitem) returns InventoryItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns InventoryItem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SubstancePolymer API                                                                                                          #
// 
service /fhir/r5/SubstancePolymer on new fhirr5:Listener(config = substancepolymerApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SubstancePolymer|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SubstancePolymer|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SubstancePolymer substancepolymer) returns SubstancePolymer|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SubstancePolymer substancepolymer) returns SubstancePolymer|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SubstancePolymer|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Basic API                                                                                                          #
// 
service /fhir/r5/Basic on new fhirr5:Listener(config = basicApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Basic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Basic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Basic basic) returns Basic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Basic basic) returns Basic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Basic|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # TestReport API                                                                                                          #
// 
service /fhir/r5/TestReport on new fhirr5:Listener(config = testreportApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns TestReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns TestReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, TestReport testreport) returns TestReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, TestReport testreport) returns TestReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns TestReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ClaimResponse API                                                                                                          #
// 
service /fhir/r5/ClaimResponse on new fhirr5:Listener(config = claimresponseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ClaimResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ClaimResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ClaimResponse claimresponse) returns ClaimResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ClaimResponse claimresponse) returns ClaimResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ClaimResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MedicationDispense API                                                                                                          #
// 
service /fhir/r5/MedicationDispense on new fhirr5:Listener(config = medicationdispenseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MedicationDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MedicationDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MedicationDispense medicationdispense) returns MedicationDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MedicationDispense medicationdispense) returns MedicationDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MedicationDispense|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # OrganizationAffiliation API                                                                                                          #
// 
service /fhir/r5/OrganizationAffiliation on new fhirr5:Listener(config = organizationaffiliationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns OrganizationAffiliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns OrganizationAffiliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, OrganizationAffiliation organizationaffiliation) returns OrganizationAffiliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, OrganizationAffiliation organizationaffiliation) returns OrganizationAffiliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns OrganizationAffiliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # DiagnosticReport API                                                                                                          #
// 
service /fhir/r5/DiagnosticReport on new fhirr5:Listener(config = diagnosticreportApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns DiagnosticReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns DiagnosticReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, DiagnosticReport diagnosticreport) returns DiagnosticReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, DiagnosticReport diagnosticreport) returns DiagnosticReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns DiagnosticReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # HealthcareService API                                                                                                          #
// 
service /fhir/r5/HealthcareService on new fhirr5:Listener(config = healthcareserviceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns HealthcareService|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns HealthcareService|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, HealthcareService healthcareservice) returns HealthcareService|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, HealthcareService healthcareservice) returns HealthcareService|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns HealthcareService|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # InventoryReport API                                                                                                          #
// 
service /fhir/r5/InventoryReport on new fhirr5:Listener(config = inventoryreportApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns InventoryReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns InventoryReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, InventoryReport inventoryreport) returns InventoryReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, InventoryReport inventoryreport) returns InventoryReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns InventoryReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # EvidenceReport API                                                                                                          #
// 
service /fhir/r5/EvidenceReport on new fhirr5:Listener(config = evidencereportApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns EvidenceReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns EvidenceReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, EvidenceReport evidencereport) returns EvidenceReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, EvidenceReport evidencereport) returns EvidenceReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns EvidenceReport|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # NutritionOrder API                                                                                                          #
// 
service /fhir/r5/NutritionOrder on new fhirr5:Listener(config = nutritionorderApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns NutritionOrder|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns NutritionOrder|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, NutritionOrder nutritionorder) returns NutritionOrder|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, NutritionOrder nutritionorder) returns NutritionOrder|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns NutritionOrder|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # TerminologyCapabilities API                                                                                                          #
// 
service /fhir/r5/TerminologyCapabilities on new fhirr5:Listener(config = terminologycapabilitiesApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns TerminologyCapabilities|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns TerminologyCapabilities|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, TerminologyCapabilities terminologycapabilities) returns TerminologyCapabilities|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, TerminologyCapabilities terminologycapabilities) returns TerminologyCapabilities|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns TerminologyCapabilities|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Evidence API                                                                                                          #
// 
service /fhir/r5/Evidence on new fhirr5:Listener(config = evidenceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Evidence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Evidence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Evidence evidence) returns Evidence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Evidence evidence) returns Evidence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Evidence|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # AuditEvent API                                                                                                          #
// 
service /fhir/r5/AuditEvent on new fhirr5:Listener(config = auditeventApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns AuditEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns AuditEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, AuditEvent auditevent) returns AuditEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, AuditEvent auditevent) returns AuditEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns AuditEvent|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Citation API                                                                                                          #
// 
service /fhir/r5/Citation on new fhirr5:Listener(config = citationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Citation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Citation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Citation citation) returns Citation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Citation citation) returns Citation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Citation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # PaymentReconciliation API                                                                                                          #
// 
service /fhir/r5/PaymentReconciliation on new fhirr5:Listener(config = paymentreconciliationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns PaymentReconciliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns PaymentReconciliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, PaymentReconciliation paymentreconciliation) returns PaymentReconciliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, PaymentReconciliation paymentreconciliation) returns PaymentReconciliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns PaymentReconciliation|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SpecimenDefinition API                                                                                                          #
// 
service /fhir/r5/SpecimenDefinition on new fhirr5:Listener(config = specimendefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SpecimenDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SpecimenDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SpecimenDefinition specimendefinition) returns SpecimenDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SpecimenDefinition specimendefinition) returns SpecimenDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SpecimenDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Condition API                                                                                                          #
// 
service /fhir/r5/Condition on new fhirr5:Listener(config = conditionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Condition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Condition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Condition condition) returns Condition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Condition condition) returns Condition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Condition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Composition API                                                                                                          #
// 
service /fhir/r5/Composition on new fhirr5:Listener(config = compositionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Composition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Composition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Composition composition) returns Composition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Composition composition) returns Composition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Composition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # DetectedIssue API                                                                                                          #
// 
service /fhir/r5/DetectedIssue on new fhirr5:Listener(config = detectedissueApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns DetectedIssue|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns DetectedIssue|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, DetectedIssue detectedissue) returns DetectedIssue|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, DetectedIssue detectedissue) returns DetectedIssue|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns DetectedIssue|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Bundle API                                                                                                          #
// 
service /fhir/r5/Bundle on new fhirr5:Listener(config = bundleApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Bundle bundle) returns Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Bundle bundle) returns Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # CompartmentDefinition API                                                                                                          #
// 
service /fhir/r5/CompartmentDefinition on new fhirr5:Listener(config = compartmentdefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns CompartmentDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns CompartmentDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, CompartmentDefinition compartmentdefinition) returns CompartmentDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, CompartmentDefinition compartmentdefinition) returns CompartmentDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns CompartmentDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # MedicationKnowledge API                                                                                                          #
// 
service /fhir/r5/MedicationKnowledge on new fhirr5:Listener(config = medicationknowledgeApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns MedicationKnowledge|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns MedicationKnowledge|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, MedicationKnowledge medicationknowledge) returns MedicationKnowledge|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, MedicationKnowledge medicationknowledge) returns MedicationKnowledge|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns MedicationKnowledge|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Patient API                                                                                                          #
// 
service /fhir/r5/Patient on new fhirr5:Listener(config = patientApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Patient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Patient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Patient patient) returns Patient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Patient patient) returns Patient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Patient|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Coverage API                                                                                                          #
// 
service /fhir/r5/Coverage on new fhirr5:Listener(config = coverageApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Coverage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Coverage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Coverage coverage) returns Coverage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Coverage coverage) returns Coverage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Coverage|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # QuestionnaireResponse API                                                                                                          #
// 
service /fhir/r5/QuestionnaireResponse on new fhirr5:Listener(config = questionnaireresponseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns QuestionnaireResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns QuestionnaireResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, QuestionnaireResponse questionnaireresponse) returns QuestionnaireResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, QuestionnaireResponse questionnaireresponse) returns QuestionnaireResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns QuestionnaireResponse|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # CoverageEligibilityRequest API                                                                                                          #
// 
service /fhir/r5/CoverageEligibilityRequest on new fhirr5:Listener(config = coverageeligibilityrequestApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns CoverageEligibilityRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns CoverageEligibilityRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, CoverageEligibilityRequest coverageeligibilityrequest) returns CoverageEligibilityRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, CoverageEligibilityRequest coverageeligibilityrequest) returns CoverageEligibilityRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns CoverageEligibilityRequest|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # NamingSystem API                                                                                                          #
// 
service /fhir/r5/NamingSystem on new fhirr5:Listener(config = namingsystemApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns NamingSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns NamingSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, NamingSystem namingsystem) returns NamingSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, NamingSystem namingsystem) returns NamingSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns NamingSystem|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SubscriptionStatus API                                                                                                          #
// 
service /fhir/r5/SubscriptionStatus on new fhirr5:Listener(config = subscriptionstatusApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SubscriptionStatus|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SubscriptionStatus|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SubscriptionStatus subscriptionstatus) returns SubscriptionStatus|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SubscriptionStatus subscriptionstatus) returns SubscriptionStatus|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SubscriptionStatus|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ExampleScenario API                                                                                                          #
// 
service /fhir/r5/ExampleScenario on new fhirr5:Listener(config = examplescenarioApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ExampleScenario|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ExampleScenario|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ExampleScenario examplescenario) returns ExampleScenario|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ExampleScenario examplescenario) returns ExampleScenario|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ExampleScenario|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # SupplyDelivery API                                                                                                          #
// 
service /fhir/r5/SupplyDelivery on new fhirr5:Listener(config = supplydeliveryApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns SupplyDelivery|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns SupplyDelivery|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, SupplyDelivery supplydelivery) returns SupplyDelivery|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, SupplyDelivery supplydelivery) returns SupplyDelivery|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns SupplyDelivery|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Schedule API                                                                                                          #
// 
service /fhir/r5/Schedule on new fhirr5:Listener(config = scheduleApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Schedule|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Schedule|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Schedule schedule) returns Schedule|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Schedule schedule) returns Schedule|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Schedule|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # DeviceDefinition API                                                                                                          #
// 
service /fhir/r5/DeviceDefinition on new fhirr5:Listener(config = devicedefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns DeviceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns DeviceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, DeviceDefinition devicedefinition) returns DeviceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, DeviceDefinition devicedefinition) returns DeviceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns DeviceDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # ClinicalImpression API                                                                                                          #
// 
service /fhir/r5/ClinicalImpression on new fhirr5:Listener(config = clinicalimpressionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns ClinicalImpression|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns ClinicalImpression|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, ClinicalImpression clinicalimpression) returns ClinicalImpression|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, ClinicalImpression clinicalimpression) returns ClinicalImpression|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns ClinicalImpression|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # PlanDefinition API                                                                                                          #
// 
service /fhir/r5/PlanDefinition on new fhirr5:Listener(config = plandefinitionApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns PlanDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns PlanDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, PlanDefinition plandefinition) returns PlanDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, PlanDefinition plandefinition) returns PlanDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns PlanDefinition|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # NutritionIntake API                                                                                                          #
// 
service /fhir/r5/NutritionIntake on new fhirr5:Listener(config = nutritionintakeApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns NutritionIntake|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns NutritionIntake|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, NutritionIntake nutritionintake) returns NutritionIntake|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, NutritionIntake nutritionintake) returns NutritionIntake|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns NutritionIntake|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # CanonicalResource API                                                                                                          #
// 
service /fhir/r5/CanonicalResource on new fhirr5:Listener(config = canonicalresourceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns CanonicalResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns CanonicalResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, CanonicalResource canonicalresource) returns CanonicalResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, CanonicalResource canonicalresource) returns CanonicalResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns CanonicalResource|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Claim API                                                                                                          #
// 
service /fhir/r5/Claim on new fhirr5:Listener(config = claimApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Claim|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Claim|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Claim claim) returns Claim|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Claim claim) returns Claim|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Claim|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


// // # Location API                                                                                                          #
// 
service /fhir/r5/Location on new fhirr5:Listener(config = locationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r5:FHIRContext fhirContext) returns Location|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r5:FHIRContext fhirContext) returns Location|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r5:FHIRContext fhirContext, Location location) returns Location|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r5:FHIRContext fhirContext, Location location) returns Location|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r5:FHIRContext fhirContext, json patch) returns Location|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r5:FHIRContext fhirContext) returns r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r5:FHIRContext fhirContext) returns r5:Bundle|r5:OperationOutcome|r5:FHIRError {
        return r5:createFHIRError("Not implemented", r5:ERROR, r5:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

